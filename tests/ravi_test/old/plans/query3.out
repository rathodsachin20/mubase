ALGO Volcano


------------------
Added the following Index Order as a built-in index
Relation Name:dep
Attribute Name:depid


------------------
Created eq 0
Adding child logExpr 3 to 0
Adding parent logExpr 2 to 0
--- ZERO SELECTIVITY ---
AND[ dep:head == 10 dep:depid == emp:depid ]Created eq 1
Adding child logExpr 2 to 1
Adding parent logExpr 1 to 1
Created eq 2
Adding child logExpr 1 to 2


------------------
Added the following Index Order as a built-in index
Relation Name:emp
Attribute Name:empid


------------------
Created eq 3
Adding child logExpr 5 to 3
Adding parent logExpr 4 to 3
Created eq 4
Adding child logExpr 4 to 4
Adding parent logExpr 0 to 4
Created eq 5
Adding child logExpr 0 to 5
Initial Query Graph
[EQCLASS5]
| [LOGEXP0]PROJECT :empid 
| | [EQCLASS4]
| | | [LOGEXP4]SELECT< AND[ 40 < :sal <:depid IN
| | | | | | | | | | [EQCLASS2]
| | | | | | | | | | | [LOGEXP1]PROJECT :depid 
| | | | | | | | | | | | [EQCLASS1]
| | | | | | | | | | | | | [LOGEXP2]SELECT< AND[ dep:head == 10 dep:depid == emp:depid ] >
| | | | | | | | | | | | | | [EQCLASS0]
| | | | | | | | | | | | | | | [LOGEXP3]dep
> ] >
| | | | [EQCLASS3]
| | | | | [LOGEXP5]emp
Cost Limit = 1000
=========== Calling ExpandDAG =============

Expanding SubDAG for eq 5

Expanding SubDAG for eq 4

Expanding SubDAG for eq 3

Expanding logexpr 5 eqclass = 3


[EQCLASS3]
| [LOGEXP5]emp
Finished Expanding logexpr 5 eqclass = 3

Finished Expanding SubDAG for eq 3


Expanding logexpr 4 eqclass = 4

Adding parent logExpr 6 to 3
Created eq 6
Adding child logExpr 6 to 6
Adding parent logExpr 7 to 6
Adding child logExpr 7 to 4
SelectPushPred_t::Apply Iterating over 3
SelectPushPred_t::Apply Finished Iterating over 3

Applying Transformation: NestedPredToApplyOp.
On Select_t node: 4

Nested predicate present in logexpr: 4
Original Predicate (Before removing nested pred):
AND[ 40 < :sal <:depid IN
| | | | | | | | | | [EQCLASS2]
| | | | | | | | | | | [LOGEXP1]PROJECT :depid 
| | | | | | | | | | | | [EQCLASS1]
| | | | | | | | | | | | | [LOGEXP2]SELECT< AND[ dep:head == 10 dep:depid == emp:depid ] >
| | | | | | | | | | | | | | [EQCLASS0]
| | | | | | | | | | | | | | | [LOGEXP3]dep
> ]
Inside method NestedPredToApplyOp_t::removeInExpr()

Inside method NestedPredToApplyOp_t::removeInExpr()

Inside method NestedPredToApplyOp_t::removeInExpr()

Modified Predicate (After removing nested pred):
AND[ 40 < :sal TRUE ]
Exracted Nested Predicate: 
<:depid IN
| | | | | | | | | | [EQCLASS2]
| | | | | | | | | | | [LOGEXP1]PROJECT :depid 
| | | | | | | | | | | | [EQCLASS1]
| | | | | | | | | | | | | [LOGEXP2]SELECT< AND[ dep:head == 10 dep:depid == emp:depid ] >
| | | | | | | | | | | | | | [EQCLASS0]
| | | | | | | | | | | | | | | [LOGEXP3]dep
>Adding parent logExpr 8 to 3
Created eq 7
Adding child logExpr 8 to 7

ID of the new Select_t: 8

EQ node for the new Select_t: 7
Adding parent logExpr 9 to 7
Adding parent logExpr 9 to 2
Adding child logExpr 9 to 4

ID of the new Apply_t: 9

EQ node for the new Apply_t : 4

NestedPredToApplyOp_t::Apply Finished

[EQCLASS4]
| [LOGEXP4]SELECT< AND[ 40 < :sal <:depid IN
| | | | | | | | | | [EQCLASS2]
| | | | | | | | | | | [LOGEXP1]PROJECT :depid 
| | | | | | | | | | | | [EQCLASS1]
| | | | | | | | | | | | | [LOGEXP2]SELECT< AND[ dep:head == 10 dep:depid == emp:depid ] >
| | | | | | | | | | | | | | [EQCLASS0]
| | | | | | | | | | | | | | | [LOGEXP3]dep
> ] >
| | [EQCLASS3]
| | | [LOGEXP5]emp
| [LOGEXP7]SELECT< <:depid IN
| | | | | | | | | | [EQCLASS2]
| | | | | | | | | | | [LOGEXP1]PROJECT :depid 
| | | | | | | | | | | | [EQCLASS1]
| | | | | | | | | | | | | [LOGEXP2]SELECT< AND[ dep:head == 10 dep:depid == emp:depid ] >
| | | | | | | | | | | | | | [EQCLASS0]
| | | | | | | | | | | | | | | [LOGEXP3]dep
> >
| | [EQCLASS6]
| | | [LOGEXP6]SELECT< 40 < :sal >
| | | | [EQCLASS3]
| | | | | [LOGEXP5]emp
| [LOGEXP9]APPLY< <:depid IN
| | | | | | | | | | [EQCLASS2]
| | | | | | | | | | | [LOGEXP1]PROJECT :depid 
| | | | | | | | | | | | [EQCLASS1]
| | | | | | | | | | | | | [LOGEXP2]SELECT< AND[ dep:head == 10 dep:depid == emp:depid ] >
| | | | | | | | | | | | | | [EQCLASS0]
| | | | | | | | | | | | | | | [LOGEXP3]dep
> >
| | [EQCLASS7]
| | | [LOGEXP8]SELECT< AND[ 40 < :sal TRUE ] >
| | | | [EQCLASS3]
| | | | | [LOGEXP5]emp
| | [EQCLASS2]
| | | [LOGEXP1]PROJECT :depid 
| | | | [EQCLASS1]
| | | | | [LOGEXP2]SELECT< AND[ dep:head == 10 dep:depid == emp:depid ] >
| | | | | | [EQCLASS0]
| | | | | | | [LOGEXP3]dep
Finished Expanding logexpr 4 eqclass = 4


Expanding SubDAG for eq 6

Expanding logexpr 6 eqclass = 6

SelectPushPred_t::Apply Iterating over 3
SelectPushPred_t::Apply Finished Iterating over 3

Applying Transformation: NestedPredToApplyOp.
On Select_t node: 6

No nested predicate in logexpr: 6

[EQCLASS6]
| [LOGEXP6]SELECT< 40 < :sal >
| | [EQCLASS3]
| | | [LOGEXP5]emp
Finished Expanding logexpr 6 eqclass = 6

Finished Expanding SubDAG for eq 6


Expanding logexpr 7 eqclass = 4

SelectPushPred_t::Apply Iterating over 6
Adding parent logExpr 10 to 3
Deleting parent logExpr 10 from 3
SelectPushPred_t::Apply Finished Iterating over 6

Applying Transformation: NestedPredToApplyOp.
On Select_t node: 7

Nested predicate present in logexpr: 7
Original Predicate (Before removing nested pred):
<:depid IN
| | | | | | | | | | [EQCLASS2]
| | | | | | | | | | | [LOGEXP1]PROJECT :depid 
| | | | | | | | | | | | [EQCLASS1]
| | | | | | | | | | | | | [LOGEXP2]SELECT< AND[ dep:head == 10 dep:depid == emp:depid ] >
| | | | | | | | | | | | | | [EQCLASS0]
| | | | | | | | | | | | | | | [LOGEXP3]dep
>
Inside method NestedPredToApplyOp_t::removeInExpr()

Modified Predicate (After removing nested pred):
TRUE
Exracted Nested Predicate: 
<:depid IN
| | | | | | | | | | [EQCLASS2]
| | | | | | | | | | | [LOGEXP1]PROJECT :depid 
| | | | | | | | | | | | [EQCLASS1]
| | | | | | | | | | | | | [LOGEXP2]SELECT< AND[ dep:head == 10 dep:depid == emp:depid ] >
| | | | | | | | | | | | | | [EQCLASS0]
| | | | | | | | | | | | | | | [LOGEXP3]dep
>Adding parent logExpr 11 to 6
Adding parent logExpr 11 to 2
Adding child logExpr 11 to 4

ID of the new Apply_t: 11

EQ node for the new Apply_t : 4

NestedPredToApplyOp_t::Apply Finished

[EQCLASS4]
| [LOGEXP4]SELECT< AND[ 40 < :sal <:depid IN
| | | | | | | | | | [EQCLASS2]
| | | | | | | | | | | [LOGEXP1]PROJECT :depid 
| | | | | | | | | | | | [EQCLASS1]
| | | | | | | | | | | | | [LOGEXP2]SELECT< AND[ dep:head == 10 dep:depid == emp:depid ] >
| | | | | | | | | | | | | | [EQCLASS0]
| | | | | | | | | | | | | | | [LOGEXP3]dep
> ] >
| | [EQCLASS3]
| | | [LOGEXP5]emp
| [LOGEXP7]SELECT< <:depid IN
| | | | | | | | | | [EQCLASS2]
| | | | | | | | | | | [LOGEXP1]PROJECT :depid 
| | | | | | | | | | | | [EQCLASS1]
| | | | | | | | | | | | | [LOGEXP2]SELECT< AND[ dep:head == 10 dep:depid == emp:depid ] >
| | | | | | | | | | | | | | [EQCLASS0]
| | | | | | | | | | | | | | | [LOGEXP3]dep
> >
| | [EQCLASS6]
| | | [LOGEXP6]SELECT< 40 < :sal >
| | | | [EQCLASS3]
| | | | | [LOGEXP5]emp
| [LOGEXP9]APPLY< <:depid IN
| | | | | | | | | | [EQCLASS2]
| | | | | | | | | | | [LOGEXP1]PROJECT :depid 
| | | | | | | | | | | | [EQCLASS1]
| | | | | | | | | | | | | [LOGEXP2]SELECT< AND[ dep:head == 10 dep:depid == emp:depid ] >
| | | | | | | | | | | | | | [EQCLASS0]
| | | | | | | | | | | | | | | [LOGEXP3]dep
> >
| | [EQCLASS7]
| | | [LOGEXP8]SELECT< AND[ 40 < :sal TRUE ] >
| | | | [EQCLASS3]
| | | | | [LOGEXP5]emp
| | [EQCLASS2]
| | | [LOGEXP1]PROJECT :depid 
| | | | [EQCLASS1]
| | | | | [LOGEXP2]SELECT< AND[ dep:head == 10 dep:depid == emp:depid ] >
| | | | | | [EQCLASS0]
| | | | | | | [LOGEXP3]dep
| [LOGEXP11]APPLY< <:depid IN
| | | | | | | | | | [EQCLASS2]
| | | | | | | | | | | [LOGEXP1]PROJECT :depid 
| | | | | | | | | | | | [EQCLASS1]
| | | | | | | | | | | | | [LOGEXP2]SELECT< AND[ dep:head == 10 dep:depid == emp:depid ] >
| | | | | | | | | | | | | | [EQCLASS0]
| | | | | | | | | | | | | | | [LOGEXP3]dep
> >
| | [EQCLASS6]
| | | [LOGEXP6]SELECT< 40 < :sal >
| | | | [EQCLASS3]
| | | | | [LOGEXP5]emp
| | [EQCLASS2]
| | | [LOGEXP1]PROJECT :depid 
| | | | [EQCLASS1]
| | | | | [LOGEXP2]SELECT< AND[ dep:head == 10 dep:depid == emp:depid ] >
| | | | | | [EQCLASS0]
| | | | | | | [LOGEXP3]dep
Finished Expanding logexpr 7 eqclass = 4


Expanding SubDAG for eq 7

Expanding logexpr 8 eqclass = 7

SelectPushPred_t::Apply Iterating over 3
SelectPushPred_t::Apply Finished Iterating over 3

Applying Transformation: NestedPredToApplyOp.
On Select_t node: 8

No nested predicate in logexpr: 8

[EQCLASS7]
| [LOGEXP8]SELECT< AND[ 40 < :sal TRUE ] >
| | [EQCLASS3]
| | | [LOGEXP5]emp
Finished Expanding logexpr 8 eqclass = 7

Finished Expanding SubDAG for eq 7


Expanding SubDAG for eq 2

Expanding SubDAG for eq 1

Expanding SubDAG for eq 0

Expanding logexpr 3 eqclass = 0


[EQCLASS0]
| [LOGEXP3]dep
Finished Expanding logexpr 3 eqclass = 0

Finished Expanding SubDAG for eq 0


Expanding logexpr 2 eqclass = 1

SelectPushPred_t::Apply Iterating over 0
SelectPushPred_t::Apply Finished Iterating over 0

Applying Transformation: NestedPredToApplyOp.
On Select_t node: 2

No nested predicate in logexpr: 2

[EQCLASS1]
| [LOGEXP2]SELECT< AND[ dep:head == 10 dep:depid == emp:depid ] >
| | [EQCLASS0]
| | | [LOGEXP3]dep
Finished Expanding logexpr 2 eqclass = 1

Finished Expanding SubDAG for eq 1


Expanding logexpr 1 eqclass = 2


[EQCLASS2]
| [LOGEXP1]PROJECT :depid 
| | [EQCLASS1]
| | | [LOGEXP2]SELECT< AND[ dep:head == 10 dep:depid == emp:depid ] >
| | | | [EQCLASS0]
| | | | | [LOGEXP3]dep
Finished Expanding logexpr 1 eqclass = 2

Finished Expanding SubDAG for eq 2


Expanding logexpr 9 eqclass = 4


[EQCLASS4]
| [LOGEXP4]SELECT< AND[ 40 < :sal <:depid IN
| | | | | | | | | | [EQCLASS2]
| | | | | | | | | | | [LOGEXP1]PROJECT :depid 
| | | | | | | | | | | | [EQCLASS1]
| | | | | | | | | | | | | [LOGEXP2]SELECT< AND[ dep:head == 10 dep:depid == emp:depid ] >
| | | | | | | | | | | | | | [EQCLASS0]
| | | | | | | | | | | | | | | [LOGEXP3]dep
> ] >
| | [EQCLASS3]
| | | [LOGEXP5]emp
| [LOGEXP7]SELECT< <:depid IN
| | | | | | | | | | [EQCLASS2]
| | | | | | | | | | | [LOGEXP1]PROJECT :depid 
| | | | | | | | | | | | [EQCLASS1]
| | | | | | | | | | | | | [LOGEXP2]SELECT< AND[ dep:head == 10 dep:depid == emp:depid ] >
| | | | | | | | | | | | | | [EQCLASS0]
| | | | | | | | | | | | | | | [LOGEXP3]dep
> >
| | [EQCLASS6]
| | | [LOGEXP6]SELECT< 40 < :sal >
| | | | [EQCLASS3]
| | | | | [LOGEXP5]emp
| [LOGEXP9]APPLY< <:depid IN
| | | | | | | | | | [EQCLASS2]
| | | | | | | | | | | [LOGEXP1]PROJECT :depid 
| | | | | | | | | | | | [EQCLASS1]
| | | | | | | | | | | | | [LOGEXP2]SELECT< AND[ dep:head == 10 dep:depid == emp:depid ] >
| | | | | | | | | | | | | | [EQCLASS0]
| | | | | | | | | | | | | | | [LOGEXP3]dep
> >
| | [EQCLASS7]
| | | [LOGEXP8]SELECT< AND[ 40 < :sal TRUE ] >
| | | | [EQCLASS3]
| | | | | [LOGEXP5]emp
| | [EQCLASS2]
| | | [LOGEXP1]PROJECT :depid 
| | | | [EQCLASS1]
| | | | | [LOGEXP2]SELECT< AND[ dep:head == 10 dep:depid == emp:depid ] >
| | | | | | [EQCLASS0]
| | | | | | | [LOGEXP3]dep
| [LOGEXP11]APPLY< <:depid IN
| | | | | | | | | | [EQCLASS2]
| | | | | | | | | | | [LOGEXP1]PROJECT :depid 
| | | | | | | | | | | | [EQCLASS1]
| | | | | | | | | | | | | [LOGEXP2]SELECT< AND[ dep:head == 10 dep:depid == emp:depid ] >
| | | | | | | | | | | | | | [EQCLASS0]
| | | | | | | | | | | | | | | [LOGEXP3]dep
> >
| | [EQCLASS6]
| | | [LOGEXP6]SELECT< 40 < :sal >
| | | | [EQCLASS3]
| | | | | [LOGEXP5]emp
| | [EQCLASS2]
| | | [LOGEXP1]PROJECT :depid 
| | | | [EQCLASS1]
| | | | | [LOGEXP2]SELECT< AND[ dep:head == 10 dep:depid == emp:depid ] >
| | | | | | [EQCLASS0]
| | | | | | | [LOGEXP3]dep
Finished Expanding logexpr 9 eqclass = 4


Expanding logexpr 11 eqclass = 4


[EQCLASS4]
| [LOGEXP4]SELECT< AND[ 40 < :sal <:depid IN
| | | | | | | | | | [EQCLASS2]
| | | | | | | | | | | [LOGEXP1]PROJECT :depid 
| | | | | | | | | | | | [EQCLASS1]
| | | | | | | | | | | | | [LOGEXP2]SELECT< AND[ dep:head == 10 dep:depid == emp:depid ] >
| | | | | | | | | | | | | | [EQCLASS0]
| | | | | | | | | | | | | | | [LOGEXP3]dep
> ] >
| | [EQCLASS3]
| | | [LOGEXP5]emp
| [LOGEXP7]SELECT< <:depid IN
| | | | | | | | | | [EQCLASS2]
| | | | | | | | | | | [LOGEXP1]PROJECT :depid 
| | | | | | | | | | | | [EQCLASS1]
| | | | | | | | | | | | | [LOGEXP2]SELECT< AND[ dep:head == 10 dep:depid == emp:depid ] >
| | | | | | | | | | | | | | [EQCLASS0]
| | | | | | | | | | | | | | | [LOGEXP3]dep
> >
| | [EQCLASS6]
| | | [LOGEXP6]SELECT< 40 < :sal >
| | | | [EQCLASS3]
| | | | | [LOGEXP5]emp
| [LOGEXP9]APPLY< <:depid IN
| | | | | | | | | | [EQCLASS2]
| | | | | | | | | | | [LOGEXP1]PROJECT :depid 
| | | | | | | | | | | | [EQCLASS1]
| | | | | | | | | | | | | [LOGEXP2]SELECT< AND[ dep:head == 10 dep:depid == emp:depid ] >
| | | | | | | | | | | | | | [EQCLASS0]
| | | | | | | | | | | | | | | [LOGEXP3]dep
> >
| | [EQCLASS7]
| | | [LOGEXP8]SELECT< AND[ 40 < :sal TRUE ] >
| | | | [EQCLASS3]
| | | | | [LOGEXP5]emp
| | [EQCLASS2]
| | | [LOGEXP1]PROJECT :depid 
| | | | [EQCLASS1]
| | | | | [LOGEXP2]SELECT< AND[ dep:head == 10 dep:depid == emp:depid ] >
| | | | | | [EQCLASS0]
| | | | | | | [LOGEXP3]dep
| [LOGEXP11]APPLY< <:depid IN
| | | | | | | | | | [EQCLASS2]
| | | | | | | | | | | [LOGEXP1]PROJECT :depid 
| | | | | | | | | | | | [EQCLASS1]
| | | | | | | | | | | | | [LOGEXP2]SELECT< AND[ dep:head == 10 dep:depid == emp:depid ] >
| | | | | | | | | | | | | | [EQCLASS0]
| | | | | | | | | | | | | | | [LOGEXP3]dep
> >
| | [EQCLASS6]
| | | [LOGEXP6]SELECT< 40 < :sal >
| | | | [EQCLASS3]
| | | | | [LOGEXP5]emp
| | [EQCLASS2]
| | | [LOGEXP1]PROJECT :depid 
| | | | [EQCLASS1]
| | | | | [LOGEXP2]SELECT< AND[ dep:head == 10 dep:depid == emp:depid ] >
| | | | | | [EQCLASS0]
| | | | | | | [LOGEXP3]dep
Finished Expanding logexpr 11 eqclass = 4

Finished Expanding SubDAG for eq 4


Expanding logexpr 0 eqclass = 5


[EQCLASS5]
| [LOGEXP0]PROJECT :empid 
| | [EQCLASS4]
| | | [LOGEXP4]SELECT< AND[ 40 < :sal <:depid IN
| | | | | | | | | | [EQCLASS2]
| | | | | | | | | | | [LOGEXP1]PROJECT :depid 
| | | | | | | | | | | | [EQCLASS1]
| | | | | | | | | | | | | [LOGEXP2]SELECT< AND[ dep:head == 10 dep:depid == emp:depid ] >
| | | | | | | | | | | | | | [EQCLASS0]
| | | | | | | | | | | | | | | [LOGEXP3]dep
> ] >
| | | | [EQCLASS3]
| | | | | [LOGEXP5]emp
| | | [LOGEXP7]SELECT< <:depid IN
| | | | | | | | | | [EQCLASS2]
| | | | | | | | | | | [LOGEXP1]PROJECT :depid 
| | | | | | | | | | | | [EQCLASS1]
| | | | | | | | | | | | | [LOGEXP2]SELECT< AND[ dep:head == 10 dep:depid == emp:depid ] >
| | | | | | | | | | | | | | [EQCLASS0]
| | | | | | | | | | | | | | | [LOGEXP3]dep
> >
| | | | [EQCLASS6]
| | | | | [LOGEXP6]SELECT< 40 < :sal >
| | | | | | [EQCLASS3]
| | | | | | | [LOGEXP5]emp
| | | [LOGEXP9]APPLY< <:depid IN
| | | | | | | | | | [EQCLASS2]
| | | | | | | | | | | [LOGEXP1]PROJECT :depid 
| | | | | | | | | | | | [EQCLASS1]
| | | | | | | | | | | | | [LOGEXP2]SELECT< AND[ dep:head == 10 dep:depid == emp:depid ] >
| | | | | | | | | | | | | | [EQCLASS0]
| | | | | | | | | | | | | | | [LOGEXP3]dep
> >
| | | | [EQCLASS7]
| | | | | [LOGEXP8]SELECT< AND[ 40 < :sal TRUE ] >
| | | | | | [EQCLASS3]
| | | | | | | [LOGEXP5]emp
| | | | [EQCLASS2]
| | | | | [LOGEXP1]PROJECT :depid 
| | | | | | [EQCLASS1]
| | | | | | | [LOGEXP2]SELECT< AND[ dep:head == 10 dep:depid == emp:depid ] >
| | | | | | | | [EQCLASS0]
| | | | | | | | | [LOGEXP3]dep
| | | [LOGEXP11]APPLY< <:depid IN
| | | | | | | | | | [EQCLASS2]
| | | | | | | | | | | [LOGEXP1]PROJECT :depid 
| | | | | | | | | | | | [EQCLASS1]
| | | | | | | | | | | | | [LOGEXP2]SELECT< AND[ dep:head == 10 dep:depid == emp:depid ] >
| | | | | | | | | | | | | | [EQCLASS0]
| | | | | | | | | | | | | | | [LOGEXP3]dep
> >
| | | | [EQCLASS6]
| | | | | [LOGEXP6]SELECT< 40 < :sal >
| | | | | | [EQCLASS3]
| | | | | | | [LOGEXP5]emp
| | | | [EQCLASS2]
| | | | | [LOGEXP1]PROJECT :depid 
| | | | | | [EQCLASS1]
| | | | | | | [LOGEXP2]SELECT< AND[ dep:head == 10 dep:depid == emp:depid ] >
| | | | | | | | [EQCLASS0]
| | | | | | | | | [LOGEXP3]dep
Finished Expanding logexpr 0 eqclass = 5

Finished Expanding SubDAG for eq 5

=========== Done ExpandDAG =============
=========== Aliase Table =============
======== End of Aliase Table =========
=========== Calling SetOuterVarLogProp =============
Setting parameter logical props for Eq = 5
Setting outerVarLogProp for Op = 0
Setting parameter logical props for Eq = 4
Setting outerVarLogProp for Op = 4
Setting parameter logical props for Eq = 3
Setting outerVarLogProp for Op = 5
Setting outerVarLogProp for Op = 5 Done
Setting paramLogProp for Eq = 3 Done
Setting outerVarLogProp for Op = 4 Done
Setting parameter logical props for Eq = 2
Setting outerVarLogProp for Op = 1
Setting parameter logical props for Eq = 1
Setting outerVarLogProp for Op = 2
Setting parameter logical props for Eq = 0
Setting outerVarLogProp for Op = 3
Setting outerVarLogProp for Op = 3 Done
Setting paramLogProp for Eq = 0 Done
Setting outerVarLogProp for Op = 2 Done
Setting paramLogProp for Eq = 1 Done
Setting outerVarLogProp for Op = 1 Done
Setting paramLogProp for Eq = 2 Done
Setting outerVarLogProp for Op = 7
Setting parameter logical props for Eq = 6
Setting outerVarLogProp for Op = 6
Setting outerVarLogProp for Op = 6 Done
Setting paramLogProp for Eq = 6 Done
Setting outerVarLogProp for Op = 7 Done
Setting outerVarLogProp for Op = 9
Setting parameter logical props for Eq = 7
Setting outerVarLogProp for Op = 8
Setting outerVarLogProp for Op = 8 Done
Setting paramLogProp for Eq = 7 Done
Setting outerVarLogProp for Op = 9 Done
Setting outerVarLogProp for Op = 11
Setting outerVarLogProp for Op = 11 Done
Setting paramLogProp for Eq = 4 Done
Setting outerVarLogProp for Op = 0 Done
Setting paramLogProp for Eq = 5 Done
=========== Done SetOuterVarLogProp =============
Expanded LQDAG -- Debug Print
<EQCLASS id="5" isCorrelated="false">
  <LOGEXP id="0" op="PROJECT"> 
<PROJ_EXPRS>
<RelArgRef relarg=":empid"/>
</PROJ_EXPRS>
    <EQCLASS id="4" isCorrelated="false">
      <LOGEXP id="4" op="SELECT">
<AND>
<LHS>
<LT>
<LHS>
<INT value="40"/>
</LHS>
<RHS>
<RelArgRef relarg=":sal"/>
</RHS>
</LT>
</LHS>
<RHS>
<INEXPR>
<LHS>
:depid</LHS>
<RHS>
                    <EQCLASS id="2" isCorrelated="false">
                      <LOGEXP id="1" op="PROJECT"> 
<PROJ_EXPRS>
<RelArgRef relarg=":depid"/>
</PROJ_EXPRS>
                        <EQCLASS id="1" isCorrelated="false">
                          <LOGEXP id="2" op="SELECT">
<AND>
<LHS>
<EQEQ>
<LHS>
<RelArgRef relarg="dep:head"/>
</LHS>
<RHS>
<INT value="10"/>
</RHS>
</EQEQ>
</LHS>
<RHS>
<EQEQ>
<LHS>
<RelArgRef relarg="dep:depid"/>
</LHS>
<RHS>
<RelArgRef relarg="emp:depid"/>
</RHS>
</EQEQ>
</RHS>
</AND>
                            <EQCLASS id="0" isCorrelated="false">
               <LOGEXP id="3" op="dep">
</LOGEXP>
</EQCLASS>
</LOGEXP>
</EQCLASS>
</LOGEXP>
</EQCLASS>
</RHS>
</INEXPR>
</RHS>
</AND>
        <EQCLASS id="3" isCorrelated="false">
     <LOGEXP id="5" op="emp">
</LOGEXP>
</EQCLASS>
</LOGEXP>
      <LOGEXP id="7" op="SELECT">
<INEXPR>
<LHS>
:depid</LHS>
<RHS>
                    <EQCLASS id="2" isCorrelated="false">
                      <LOGEXP id="1" op="PROJECT"> 
<PROJ_EXPRS>
<RelArgRef relarg=":depid"/>
</PROJ_EXPRS>
                        <EQCLASS id="1" isCorrelated="false">
                          <LOGEXP id="2" op="SELECT">
<AND>
<LHS>
<EQEQ>
<LHS>
<RelArgRef relarg="dep:head"/>
</LHS>
<RHS>
<INT value="10"/>
</RHS>
</EQEQ>
</LHS>
<RHS>
<EQEQ>
<LHS>
<RelArgRef relarg="dep:depid"/>
</LHS>
<RHS>
<RelArgRef relarg="emp:depid"/>
</RHS>
</EQEQ>
</RHS>
</AND>
                            <EQCLASS id="0" isCorrelated="false">
               <LOGEXP id="3" op="dep">
</LOGEXP>
</EQCLASS>
</LOGEXP>
</EQCLASS>
</LOGEXP>
</EQCLASS>
</RHS>
</INEXPR>
        <EQCLASS id="6" isCorrelated="false">
          <LOGEXP id="6" op="SELECT">
<LT>
<LHS>
<INT value="40"/>
</LHS>
<RHS>
<RelArgRef relarg=":sal"/>
</RHS>
</LT>
            <EQCLASS id="3" isCorrelated="false">
       <LOGEXP id="5" op="emp">
</LOGEXP>
</EQCLASS>
</LOGEXP>
</EQCLASS>
</LOGEXP>
      <LOGEXP id="9" op="APPLY"> 
<INEXPR>
<LHS>
:depid</LHS>
<RHS>
                    <EQCLASS id="2" isCorrelated="false">
                      <LOGEXP id="1" op="PROJECT"> 
<PROJ_EXPRS>
<RelArgRef relarg=":depid"/>
</PROJ_EXPRS>
                        <EQCLASS id="1" isCorrelated="false">
                          <LOGEXP id="2" op="SELECT">
<AND>
<LHS>
<EQEQ>
<LHS>
<RelArgRef relarg="dep:head"/>
</LHS>
<RHS>
<INT value="10"/>
</RHS>
</EQEQ>
</LHS>
<RHS>
<EQEQ>
<LHS>
<RelArgRef relarg="dep:depid"/>
</LHS>
<RHS>
<RelArgRef relarg="emp:depid"/>
</RHS>
</EQEQ>
</RHS>
</AND>
                            <EQCLASS id="0" isCorrelated="false">
               <LOGEXP id="3" op="dep">
</LOGEXP>
</EQCLASS>
</LOGEXP>
</EQCLASS>
</LOGEXP>
</EQCLASS>
</RHS>
</INEXPR>
        <EQCLASS id="7" isCorrelated="false">
          <LOGEXP id="8" op="SELECT">
<AND>
<LHS>
<LT>
<LHS>
<INT value="40"/>
</LHS>
<RHS>
<RelArgRef relarg=":sal"/>
</RHS>
</LT>
</LHS>
<RHS>
<TRUE/>
</RHS>
</AND>
            <EQCLASS id="3" isCorrelated="false">
       <LOGEXP id="5" op="emp">
</LOGEXP>
</EQCLASS>
</LOGEXP>
</EQCLASS>
        <EQCLASS id="2" isCorrelated="false">
          <LOGEXP id="1" op="PROJECT"> 
<PROJ_EXPRS>
<RelArgRef relarg=":depid"/>
</PROJ_EXPRS>
            <EQCLASS id="1" isCorrelated="false">
              <LOGEXP id="2" op="SELECT">
<AND>
<LHS>
<EQEQ>
<LHS>
<RelArgRef relarg="dep:head"/>
</LHS>
<RHS>
<INT value="10"/>
</RHS>
</EQEQ>
</LHS>
<RHS>
<EQEQ>
<LHS>
<RelArgRef relarg="dep:depid"/>
</LHS>
<RHS>
<RelArgRef relarg="emp:depid"/>
</RHS>
</EQEQ>
</RHS>
</AND>
                <EQCLASS id="0" isCorrelated="false">
         <LOGEXP id="3" op="dep">
</LOGEXP>
</EQCLASS>
</LOGEXP>
</EQCLASS>
</LOGEXP>
</EQCLASS>
</LOGEXP>
      <LOGEXP id="11" op="APPLY"> 
<INEXPR>
<LHS>
:depid</LHS>
<RHS>
                    <EQCLASS id="2" isCorrelated="false">
                      <LOGEXP id="1" op="PROJECT"> 
<PROJ_EXPRS>
<RelArgRef relarg=":depid"/>
</PROJ_EXPRS>
                        <EQCLASS id="1" isCorrelated="false">
                          <LOGEXP id="2" op="SELECT">
<AND>
<LHS>
<EQEQ>
<LHS>
<RelArgRef relarg="dep:head"/>
</LHS>
<RHS>
<INT value="10"/>
</RHS>
</EQEQ>
</LHS>
<RHS>
<EQEQ>
<LHS>
<RelArgRef relarg="dep:depid"/>
</LHS>
<RHS>
<RelArgRef relarg="emp:depid"/>
</RHS>
</EQEQ>
</RHS>
</AND>
                            <EQCLASS id="0" isCorrelated="false">
               <LOGEXP id="3" op="dep">
</LOGEXP>
</EQCLASS>
</LOGEXP>
</EQCLASS>
</LOGEXP>
</EQCLASS>
</RHS>
</INEXPR>
        <EQCLASS id="6" isCorrelated="false">
          <LOGEXP id="6" op="SELECT">
<LT>
<LHS>
<INT value="40"/>
</LHS>
<RHS>
<RelArgRef relarg=":sal"/>
</RHS>
</LT>
            <EQCLASS id="3" isCorrelated="false">
       <LOGEXP id="5" op="emp">
</LOGEXP>
</EQCLASS>
</LOGEXP>
</EQCLASS>
        <EQCLASS id="2" isCorrelated="false">
          <LOGEXP id="1" op="PROJECT"> 
<PROJ_EXPRS>
<RelArgRef relarg=":depid"/>
</PROJ_EXPRS>
            <EQCLASS id="1" isCorrelated="false">
              <LOGEXP id="2" op="SELECT">
<AND>
<LHS>
<EQEQ>
<LHS>
<RelArgRef relarg="dep:head"/>
</LHS>
<RHS>
<INT value="10"/>
</RHS>
</EQEQ>
</LHS>
<RHS>
<EQEQ>
<LHS>
<RelArgRef relarg="dep:depid"/>
</LHS>
<RHS>
<RelArgRef relarg="emp:depid"/>
</RHS>
</EQEQ>
</RHS>
</AND>
                <EQCLASS id="0" isCorrelated="false">
         <LOGEXP id="3" op="dep">
</LOGEXP>
</EQCLASS>
</LOGEXP>
</EQCLASS>
</LOGEXP>
</EQCLASS>
</LOGEXP>
</EQCLASS>
</LOGEXP>
</EQCLASS>
End of Expanded LQDAG -- Debug Print
Calling GetInteresting Order -- Debug Print
Getting interesting props for Eq = 5
Getting interesting props for Op = 0
Getting interesting props for Eq = 4
Getting interesting props for Op = 4
Getting interesting props for Eq = 3
Returning empty interesting orders for Eq 3
DEBUG: In Expr->GetInterestingOrders()
DEBUG: Number of outervars = 0
Constructed interesting orders for Eq:4< >DEBUG: Returning from Expre->GetInterestingOrders()
Getting interesting props for Op = 7
Getting interesting props for Eq = 6
Getting interesting props for Op = 6
Getting interesting props for Eq = 3
Returning empty interesting orders for Eq 3
DEBUG: In Expr->GetInterestingOrders()
DEBUG: Number of outervars = 0
Constructed interesting orders for Eq:6< >DEBUG: Returning from Expre->GetInterestingOrders()
Returning: Interesting orders for Eq 6:
< >DEBUG: In Expr->GetInterestingOrders()
DEBUG: Input ins not a base rel. returning.
Getting interesting props for Apply Op = 9
Getting interesting props for Eq = 7
Getting interesting props for Op = 8
Getting interesting props for Eq = 3
Returning empty interesting orders for Eq 3
DEBUG: In Expr->GetInterestingOrders()
DEBUG: Number of outervars = 0
Constructed interesting orders for Eq:7< >DEBUG: Returning from Expre->GetInterestingOrders()
Returning: Interesting orders for Eq 7:
< >Getting interesting props for Eq = 2
Getting interesting props for Op = 1
Getting interesting props for Eq = 1
Getting interesting props for Op = 2
Getting interesting props for Eq = 0
Returning empty interesting orders for Eq 0
DEBUG: In Expr->GetInterestingOrders()
DEBUG: Number of outervars = 0
Constructed interesting orders for Eq:1< >DEBUG: Returning from Expre->GetInterestingOrders()
Returning: Interesting orders for Eq 1:
< >Returning: Interesting orders for Eq 2:
< >Getting interesting props for Apply Op = 11
Getting interesting props for Eq = 6
Getting interesting props for Op = 6
Getting interesting props for Eq = 3
Returning empty interesting orders for Eq 3
DEBUG: In Expr->GetInterestingOrders()
DEBUG: Number of outervars = 0
Constructed interesting orders for Eq:6< >DEBUG: Returning from Expre->GetInterestingOrders()
Returning: Interesting orders for Eq 6:
< >Getting interesting props for Eq = 2
Getting interesting props for Op = 1
Getting interesting props for Eq = 1
Getting interesting props for Op = 2
Getting interesting props for Eq = 0
Returning empty interesting orders for Eq 0
DEBUG: In Expr->GetInterestingOrders()
DEBUG: Number of outervars = 0
Constructed interesting orders for Eq:1< >DEBUG: Returning from Expre->GetInterestingOrders()
Returning: Interesting orders for Eq 1:
< >Returning: Interesting orders for Eq 2:
< >Returning: Interesting orders for Eq 4:
< >Returning: Interesting orders for Eq 5:
< >GetInterestingOrders... Success!
< >LDAGUSR 10
LDAGSYS 0
Applying logical subsumption at SubDAG for eq 5
Applying logical subsumption at SubDAG for eq 4
Applying logical subsumption at SubDAG for eq 3
Applying logical subsumption at SubDAG for eq 3
Adding select subsumption path from [EQCLASS7] to [EQCLASS6]
Adding parent logExpr 12 to 6
Adding child logExpr 12 to 7
Finished adding select subsumption path from [EQCLASS7] to [EQCLASS6]
Finished Applying logical subsumption at SubDAG for eq 3
Finished Applying logical subsumption at SubDAG for eq 3

Applying logical subsumption at SubDAG for eq 6
Applying logical subsumption at SubDAG for eq 6
Finished Applying logical subsumption at SubDAG for eq 6
Finished Applying logical subsumption at SubDAG for eq 6

Applying logical subsumption at SubDAG for eq 7
Applying logical subsumption at SubDAG for eq 7
Finished Applying logical subsumption at SubDAG for eq 7
Finished Applying logical subsumption at SubDAG for eq 7

Applying logical subsumption at SubDAG for eq 2
Applying logical subsumption at SubDAG for eq 1
Applying logical subsumption at SubDAG for eq 0
Applying logical subsumption at SubDAG for eq 0
Finished Applying logical subsumption at SubDAG for eq 0
Finished Applying logical subsumption at SubDAG for eq 0

Applying logical subsumption at SubDAG for eq 1
Finished Applying logical subsumption at SubDAG for eq 1
Finished Applying logical subsumption at SubDAG for eq 1

Applying logical subsumption at SubDAG for eq 2
Finished Applying logical subsumption at SubDAG for eq 2
Finished Applying logical subsumption at SubDAG for eq 2

Applying logical subsumption at SubDAG for eq 4
Finished Applying logical subsumption at SubDAG for eq 4
Finished Applying logical subsumption at SubDAG for eq 4

Applying logical subsumption at SubDAG for eq 5
Finished Applying logical subsumption at SubDAG for eq 5
Finished Applying logical subsumption at SubDAG for eq 5

Optimizing Eq: 5
FindBestPlan Eq: 5
Volcano_t::FindBestAlgPlan Iterating over 5 for PlanGroup = 0
Eq = 5 PlanGroup = 0 LogExpr = 0
FindBestPlan Eq: 4
Volcano_t::FindBestAlgPlan Iterating over 4 for PlanGroup = 1
Eq = 4 PlanGroup = 1 LogExpr = 4
NumDistinct = 100
=========== Calling ExpandDAG =============
=========== Done ExpandDAG =============
=========== Aliase Table =============
======== End of Aliase Table =========
=========== Calling SetOuterVarLogProp =============
=========== Done SetOuterVarLogProp =============
Expanded LQDAG -- Debug Print
<EQCLASS id="2" isCorrelated="false">
  <LOGEXP id="1" op="PROJECT"> 
<PROJ_EXPRS>
<RelArgRef relarg=":depid"/>
</PROJ_EXPRS>
    <EQCLASS id="1" isCorrelated="false">
      <LOGEXP id="2" op="SELECT">
<AND>
<LHS>
<EQEQ>
<LHS>
<RelArgRef relarg="dep:head"/>
</LHS>
<RHS>
<INT value="10"/>
</RHS>
</EQEQ>
</LHS>
<RHS>
<EQEQ>
<LHS>
<RelArgRef relarg="dep:depid"/>
</LHS>
<RHS>
<RelArgRef relarg="emp:depid"/>
</RHS>
</EQEQ>
</RHS>
</AND>
        <EQCLASS id="0" isCorrelated="false">
     <LOGEXP id="3" op="dep">
</LOGEXP>
</EQCLASS>
</LOGEXP>
</EQCLASS>
</LOGEXP>
</EQCLASS>
End of Expanded LQDAG -- Debug Print
Calling GetInteresting Order -- Debug Print
Getting interesting props for Eq = 2
Getting interesting props for Op = 1
Getting interesting props for Eq = 1
Getting interesting props for Op = 2
Getting interesting props for Eq = 0
Returning empty interesting orders for Eq 0
DEBUG: In Expr->GetInterestingOrders()
DEBUG: Number of outervars = 0
Constructed interesting orders for Eq:1< >DEBUG: Returning from Expre->GetInterestingOrders()
Returning: Interesting orders for Eq 1:
< >Returning: Interesting orders for Eq 2:
< >GetInterestingOrders... Success!
< >LDAGUSR 0
LDAGSYS 0
Optimizing Eq: 2
FindBestPlan Eq: 2
Volcano_t::FindBestAlgPlan Iterating over 2 for PlanGroup = 2
Eq = 2 PlanGroup = 2 LogExpr = 1
FindBestPlan Eq: 1
Volcano_t::FindBestAlgPlan Iterating over 1 for PlanGroup = 3
Eq = 1 PlanGroup = 3 LogExpr = 2
FindBestPlan Eq: 0
Volcano_t::FindBestAlgPlan Iterating over 0 for PlanGroup = 4
Eq = 0 PlanGroup = 4 LogExpr = 3
[EQCLASS0][PLANGRP4] UseCost = 0.0088 Plan Cost = 0.0088 #Tuples = 100 #Blocks = 4
| [ALG0] RELSCAN< dep > Cost = 0.0088


Volcano_t::FindBestAlgPlan Finished Iterating over 0 for PlanGroup = 4
Finished FindBestPlan Eq: 0
Found best plan for select ...
[EQCLASS1][PLANGRP3] UseCost = 0.0022 Plan Cost = 0.0098 #Tuples = 1 #Blocks = 1
| [ALG1] SELECT< AND[ dep:head == 10 dep:depid == emp:depid ] > Cost = 0.001
| | [EQCLASS0][PLANGRP4] UseCost = 0.0088 Plan Cost = 0.0088 #Tuples = 100 #Blocks = 4
| | | [ALG0] RELSCAN< dep > Cost = 0.0088


Added new plan group id = 5 for eq id = 0
Number of properties = 1
< 0 >

FindBestPlan Eq: 0
Volcano_t::FindBestAlgPlan Iterating over 0 for PlanGroup = 5
Eq = 0 PlanGroup = 5 LogExpr = 3
Volcano_t::FindBestAlgPlan Finished Iterating over 0 for PlanGroup = 5
Finished FindBestPlan Eq: 0
Volcano_t::FindBestAlgPlan Finished Iterating over 1 for PlanGroup = 3
Finished FindBestPlan Eq: 1
[EQCLASS2][PLANGRP2] UseCost = 0.0022 Plan Cost = 0.0098 #Tuples = 1 #Blocks = 1
| [ALG2] PROJECT< :depid > Cost = 0
| | [EQCLASS1][PLANGRP3] UseCost = 0.0022 Plan Cost = 0.0098 #Tuples = 1 #Blocks = 1
| | | [ALG1] SELECT< AND[ dep:head == 10 dep:depid == emp:depid ] > Cost = 0.001
| | | | [EQCLASS0][PLANGRP4] UseCost = 0.0088 Plan Cost = 0.0088 #Tuples = 100 #Blocks = 4
| | | | | [ALG0] RELSCAN< dep > Cost = 0.0088


Volcano_t::FindBestAlgPlan Finished Iterating over 2 for PlanGroup = 2
Finished FindBestPlan Eq: 2
Done Optimizing Eq: 2
Nested Query: Eq = 2 CostLimit = 9.99871 Best Plan Cost = 0.0098
Nested Query Optimization Successful
dist = 100 subQueryCost = 0.0098
FindBestPlan Eq: 3
Volcano_t::FindBestAlgPlan Iterating over 3 for PlanGroup = 6
Eq = 3 PlanGroup = 6 LogExpr = 5
[EQCLASS3][PLANGRP6] UseCost = 0.88 Plan Cost = 0.88 #Tuples = 20000 #Blocks = 400
| [ALG3] RELSCAN< emp > Cost = 0.88


Volcano_t::FindBestAlgPlan Finished Iterating over 3 for PlanGroup = 6
Finished FindBestPlan Eq: 3
Found best plan for select ...
[EQCLASS4][PLANGRP1] UseCost = 0.5368 Plan Cost = 1.9888 #Tuples = 20000 #Blocks = 244
| [ALG4] SELECT< AND[ 40 < :sal <:depid IN
| | | | | | | | | | [EQCLASS2][PLANGRP2] UseCost = 0.0022 Plan Cost = 0.0098 #Tuples = 1 #Blocks = 1
| | | | | | | | | | | [ALG2] PROJECT< :depid > Cost = 0
| | | | | | | | | | | | [EQCLASS1][PLANGRP3] UseCost = 0.0022 Plan Cost = 0.0098 #Tuples = 1 #Blocks = 1
| | | | | | | | | | | | | [ALG1] SELECT< AND[ dep:head == 10 dep:depid == emp:depid ] > Cost = 0.001
| | | | | | | | | | | | | | [EQCLASS0][PLANGRP4] UseCost = 0.0088 Plan Cost = 0.0088 #Tuples = 100 #Blocks = 4
| | | | | | | | | | | | | | | [ALG0] RELSCAN< dep > Cost = 0.0088
> ] > Cost = 1.1088
| | [EQCLASS3][PLANGRP6] UseCost = 0.88 Plan Cost = 0.88 #Tuples = 20000 #Blocks = 400
| | | [ALG3] RELSCAN< emp > Cost = 0.88


dist = 100 subQueryCost = 0.0098
Added new plan group id = 7 for eq id = 3
Number of properties = 1
< 1 >

FindBestPlan Eq: 3
Volcano_t::FindBestAlgPlan Iterating over 3 for PlanGroup = 7
Eq = 3 PlanGroup = 7 LogExpr = 5
Volcano_t::FindBestAlgPlan Finished Iterating over 3 for PlanGroup = 7
Finished FindBestPlan Eq: 3
Eq = 4 PlanGroup = 1 LogExpr = 7
dist = 100 subQueryCost = 0.0098
FindBestPlan Eq: 6
Volcano_t::FindBestAlgPlan Iterating over 6 for PlanGroup = 8
Eq = 6 PlanGroup = 8 LogExpr = 6
FindBestPlan Eq: 3
Finished FindBestPlan Eq: 3
FindBestPlan Eq: 3
Finished FindBestPlan Eq: 3
Volcano_t::FindBestAlgPlan Finished Iterating over 6 for PlanGroup = 8
Finished FindBestPlan Eq: 6
Eq = 4 PlanGroup = 1 LogExpr = 9
Getting interesting props for Eq = 2
Getting interesting props for Op = 1
Getting interesting props for Eq = 1
Getting interesting props for Op = 2
Getting interesting props for Eq = 0
Returning empty interesting orders for Eq 0
DEBUG: In Expr->GetInterestingOrders()
DEBUG: Number of outervars = 0
Constructed interesting orders for Eq:1< >DEBUG: Returning from Expre->GetInterestingOrders()
Returning: Interesting orders for Eq 1:
< >Returning: Interesting orders for Eq 2:
< >Added new plan group id = 10 for eq id = 7
Number of properties = 1
< >

FindBestPlan Eq: 7
Volcano_t::FindBestAlgPlan Iterating over 7 for PlanGroup = 10
Eq = 7 PlanGroup = 10 LogExpr = 8
Added new plan group id = 11 for eq id = 3
Number of properties = 1
< >

FindBestPlan Eq: 3
Volcano_t::FindBestAlgPlan Iterating over 3 for PlanGroup = 11
Eq = 3 PlanGroup = 11 LogExpr = 5
PlanGroup 11 BuiltIn Sort< >
 on emp cost = 0.88
 rel op = 5
[EQCLASS3][PLANGRP11] UseCost = 0.88 Plan Cost = 0.88 #Tuples = 20000 #Blocks = 400 BUILTIN
| [ALG5] RELSCAN< emp > Cost = 0.88


Volcano_t::FindBestAlgPlan Finished Iterating over 3 for PlanGroup = 11
FindBestAlgPlan Eq: 3
Finished FindBestAlgPlan Eq: 3
[EQCLASS3][PLANGRP11] UseCost = 0.88 Plan Cost = 0.88 #Tuples = 20000 #Blocks = 400 BUILTIN
| [ENF6] SORT< > Cost = 0
| | [EQCLASS3][PLANGRP6] UseCost = 0.88 Plan Cost = 0.88 #Tuples = 20000 #Blocks = 400
| | | [ALG3] RELSCAN< emp > Cost = 0.88


Finished FindBestPlan Eq: 3
Found best plan for select ...
[EQCLASS7][PLANGRP10] UseCost = 0.5368 Plan Cost = 1.0088 #Tuples = 20000 #Blocks = 244
| [ALG7] SELECT< AND[ 40 < :sal TRUE ] > Cost = 0.1288
| | [EQCLASS3][PLANGRP11] UseCost = 0.88 Plan Cost = 0.88 #Tuples = 20000 #Blocks = 400 BUILTIN
| | | [ENF6] SORT< > Cost = 0
| | | | [EQCLASS3][PLANGRP6] UseCost = 0.88 Plan Cost = 0.88 #Tuples = 20000 #Blocks = 400
| | | | | [ALG3] RELSCAN< emp > Cost = 0.88


Eq = 7 PlanGroup = 10 LogExpr = 12
Added new plan group id = 12 for eq id = 6
Number of properties = 1
< >

FindBestPlan Eq: 6
Volcano_t::FindBestAlgPlan Iterating over 6 for PlanGroup = 12
Eq = 6 PlanGroup = 12 LogExpr = 6
FindBestPlan Eq: 3
Finished FindBestPlan Eq: 3
Volcano_t::FindBestAlgPlan Finished Iterating over 6 for PlanGroup = 12
FindBestAlgPlan Eq: 6
Finished FindBestAlgPlan Eq: 6
Finished FindBestPlan Eq: 6
Volcano_t::FindBestAlgPlan Finished Iterating over 7 for PlanGroup = 10
FindBestAlgPlan Eq: 7
Volcano_t::FindBestAlgPlan Iterating over 7 for PlanGroup = 9
Eq = 7 PlanGroup = 9 LogExpr = 8
FindBestPlan Eq: 3
Finished FindBestPlan Eq: 3
Found best plan for select ...
[EQCLASS7][PLANGRP9] UseCost = 0.5368 Plan Cost = 1.0088 #Tuples = 20000 #Blocks = 244
| [ALG8] SELECT< AND[ 40 < :sal TRUE ] > Cost = 0.1288
| | [EQCLASS3][PLANGRP6] UseCost = 0.88 Plan Cost = 0.88 #Tuples = 20000 #Blocks = 400
| | | [ALG3] RELSCAN< emp > Cost = 0.88


FindBestPlan Eq: 3
Finished FindBestPlan Eq: 3
Eq = 7 PlanGroup = 9 LogExpr = 12
FindBestPlan Eq: 6
Finished FindBestPlan Eq: 6
Added new plan group id = 13 for eq id = 6
Number of properties = 1
< 1 >

FindBestPlan Eq: 6
Volcano_t::FindBestAlgPlan Iterating over 6 for PlanGroup = 13
Eq = 6 PlanGroup = 13 LogExpr = 6
Volcano_t::FindBestAlgPlan Finished Iterating over 6 for PlanGroup = 13
Finished FindBestPlan Eq: 6
Volcano_t::FindBestAlgPlan Finished Iterating over 7 for PlanGroup = 9
Finished FindBestAlgPlan Eq: 7
[EQCLASS7][PLANGRP10] UseCost = 0.5368 Plan Cost = 1.0088 #Tuples = 20000 #Blocks = 244
| [ENF9] SORT< > Cost = 0
| | [EQCLASS7][PLANGRP9] UseCost = 0.5368 Plan Cost = 1.0088 #Tuples = 20000 #Blocks = 244
| | | [ALG8] SELECT< AND[ 40 < :sal TRUE ] > Cost = 0.1288
| | | | [EQCLASS3][PLANGRP6] UseCost = 0.88 Plan Cost = 0.88 #Tuples = 20000 #Blocks = 400
| | | | | [ALG3] RELSCAN< emp > Cost = 0.88


Finished FindBestPlan Eq: 7
FindBestPlan Eq: 2
Finished FindBestPlan Eq: 2
[EQCLASS4][PLANGRP1] UseCost = 0.5368 Plan Cost = 1.1162 #Tuples = 20000 #Blocks = 244
