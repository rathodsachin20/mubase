
Setup:
======
TPC-H 1 GB dataset. All tables have appropriate constraints (PK, FK).
Each table has a clustering index on the PK.

Query 0:
--------
lineitem JOIN partsupp ON partkey, suppkey

partsupp has a clustering index on partkey, suppket
lineitem has a secondary index on suppkey, that covers the query.

select l.l_suppkey, l.l_partkey, ps.ps_availqty, l.l_orderkey  from lineitem l inner merge join partsupp ps on (l.l_partkey=ps.ps_partkey and l.l_suppkey=ps.ps_suppkey)

Plan: case0.sqlplan
	  Chooses (partkey, suppkey) as the order for merge-join. 
      Clustered indes sacn for partsupp and secondary index (covering) scan for lineitem.
	  Explicit sort of lineitem on (partkey, suppkey) amounting more than 60% of the plan cost.


Our (improved) plan for the same join order:
	Chose (suppkey, partkey) as the order for merge-join.
    Explicit sort of partsupp (has 800K records << 6 M in Lineitem)
	Use the covering index on LI.suppkey and get the extra order (suppkey, partkey) cheap.


A modified case:
	Created a secondary index on partsupp.suppkey that included partkey (covered the query)
	Plan: case0-b.sqlplan
	
	SQL Server correctly chose (suppkey, partkey) as the join order. However, for lineitem
	it added an explicit sort amounting to 62% of the query cost and for partsupp it didn't
	add any explicit sort. 

    Possible reason: partsupp is physically sorted on (partkey, suppkey). But ideally this 
	should not have mattered since we are only scanning the index and not fetching the data
	pages. Both lineitem and partsupp should have been treated the same way.



Query 1:
--------
select * from lineitem l inner merge join partsupp ps on (l.l_partkey=ps.ps_partkey and l.l_suppkey=ps.ps_suppkey) inner merge join supplier s on  l.l_suppkey=s.s_suppkey order by l.l_suppkey, l.l_partkey;

Plan: See the case1.sqlplan

Our (improved) plan for the same join order:

	Sort lineitem on suppkey, partkey (as against sorting on just suppkey)
	Sort partsupp on suppkey, partkey ( - do -)
	Merge lineitem and partsupp on (suppkey, partkey) as against just suppkey
	Clustered index scan on Supplier (same as in plan)
	Merge with the above merge-join result on supp_key (same as in plan)
	But infer that the o/p order is l_suppkey, l_partkey and there by avoid the last sort that
	takes 60% of the plan cost!


Query 2:
--------
select l1.l_suppkey, l1.l_partkey, ps.ps_availqty, l1.l_orderkey  from lineitem l1 inner merge join partsupp ps on (l1.l_partkey=ps.ps_partkey and l1.l_suppkey=ps.ps_suppkey) inner merge join lineitem l2 on  (l2.l_suppkey=l1.l_suppkey and l2.l_partkey=l1.l_partkey and l2.l_orderkey=l1.l_orderkey);

Plan: see case2.sqlplan

Note: The o/p size estimation for the outermost join has gone for a toss. SQLServer is not realizing that
a self join of 2 tables will result in at least as many rows as in the table. It is estimating a size of 1
where it should have been 6 Million!!

Our (improved) plan for the same join order:
	For the join between li1 and partsupp use the order (suppkey, partkey)
           -- Get li1 sorted on (suppkey, partkey, orderkey) - so as to help a future join
	   -- We can get the above order close to free from the covering index
	   -- Explicit sort on the partsupp (SQLServer has chosen the clustering index on partkey, suppkey)

	For the join between li1 and li2 use the order (suppkey, partkey, orderkey)
	   -- We can get this order close to free from the covering index on li2
	   -- Directly merge with the other i/p
           -- Note that SQLServer chooses (parkey, suppkey, orderkey) as the order.
	      Requires expensive sorting on both sides!!!


Query 3:
--------

A simple test for checking whether SQL Server takes into account shared order prefixes. 
R1 Join R2 Join R3 - Each join has 3 attributes and 2 of these are shared between the two joins.
No indices.

select * from R1 inner merge join R2 on (R1.c3=R2.c3 and R1.c4=R2.c4 and R1.c5=R2.c5) inner merge join R3 on (R3.c1=R1.c1 and R3.c4=R1.c4 and R3.c5=R1.c5)

SQL Server does not choose a good orders. (see case3.sqlplan)

Our (improved) plan for the same join order:
	Instead of (c3, c4, c5), choose (c5, c4, c3) as the order for the inner merge join. Getting (c5, c4, c1) for
        the outer merge join will then be very cheap.


